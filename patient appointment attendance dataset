{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# Project: Investigating patient appointment attendance dataset\n",
    "## Table of Contents\n",
    "<ul>\n",
    "<li><a href=\"#intro\">Introduction</a></li>\n",
    "<li><a href=\"#wrangling\">Data Wrangling</a></li>\n",
    "<li><a href=\"#eda\">Exploratory Data Analysis</a></li>\n",
    "<li><a href=\"#conclusions\">Conclusions</a></li>\n",
    "</ul>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='intro'></a>\n",
    "## Introduction\n",
    "\n",
    "\n",
    "This project investigates the no-show dataset which examines a brazillian collected 110.527 medical appointments and 14 associated variables that provides us with a helpful insight into the common characteristics of patients who tend to book an appointment and fail to show up. \n",
    "    The dataset variables are self-explanatory, however, the only variable that requires further inspection is the 'scholarship' variable: it indicates whether or not the patient is enrolled in Brasilian welfare program Bolsa Família. The Bolsa Família is a social welfare program that aids poor family with financial support if they have children, and families must ensure school attendance of their children and recieving their vaccination\n",
    "    Furthermore, the last variable constitue the output variable. the no_show variable outputs 'Yes' if the patient failed to show up, and 'No' if they patient showed up to the appointment. \n",
    "    \n",
    "\n",
    "<b>The common questions this project examines, revolves around the common characteristics of patients that fail to attend the appointment. The project investigates the following: </b>\n",
    "<ol>\n",
    "<li> Are people not commited to a scholarship more likely to not show up?</li>\n",
    "<li>What age group of patients that are more likely to not show up?</li>\n",
    "    <li>What is the common medical issue of patients more likely to not show up? </li>\n",
    "    </ol>\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use this cell to set up import statements for all of the packages that you\n",
    "#   plan to use.\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "% matplotlib inline\n",
    "\n",
    "# Remember to include a 'magic word' so that your visualizations are plotted\n",
    "#   inline with the notebook. See this page for more:\n",
    "#   http://ipython.readthedocs.io/en/stable/interactive/magics.html\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='wrangling'></a>\n",
    "## Data Wrangling\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### Data Overview"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PatientId</th>\n",
       "      <th>AppointmentID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>ScheduledDay</th>\n",
       "      <th>AppointmentDay</th>\n",
       "      <th>Age</th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Scholarship</th>\n",
       "      <th>Hipertension</th>\n",
       "      <th>Diabetes</th>\n",
       "      <th>Alcoholism</th>\n",
       "      <th>Handcap</th>\n",
       "      <th>SMS_received</th>\n",
       "      <th>No-show</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.987250e+13</td>\n",
       "      <td>5642903</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T18:38:08Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>62</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.589978e+14</td>\n",
       "      <td>5642503</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-04-29T16:08:27Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>56</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.262962e+12</td>\n",
       "      <td>5642549</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T16:19:04Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>62</td>\n",
       "      <td>MATA DA PRAIA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.679512e+11</td>\n",
       "      <td>5642828</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T17:29:31Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>8</td>\n",
       "      <td>PONTAL DE CAMBURI</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.841186e+12</td>\n",
       "      <td>5642494</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T16:07:23Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>56</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      PatientId  AppointmentID Gender          ScheduledDay  \\\n",
       "0  2.987250e+13        5642903      F  2016-04-29T18:38:08Z   \n",
       "1  5.589978e+14        5642503      M  2016-04-29T16:08:27Z   \n",
       "2  4.262962e+12        5642549      F  2016-04-29T16:19:04Z   \n",
       "3  8.679512e+11        5642828      F  2016-04-29T17:29:31Z   \n",
       "4  8.841186e+12        5642494      F  2016-04-29T16:07:23Z   \n",
       "\n",
       "         AppointmentDay  Age      Neighbourhood  Scholarship  Hipertension  \\\n",
       "0  2016-04-29T00:00:00Z   62    JARDIM DA PENHA            0             1   \n",
       "1  2016-04-29T00:00:00Z   56    JARDIM DA PENHA            0             0   \n",
       "2  2016-04-29T00:00:00Z   62      MATA DA PRAIA            0             0   \n",
       "3  2016-04-29T00:00:00Z    8  PONTAL DE CAMBURI            0             0   \n",
       "4  2016-04-29T00:00:00Z   56    JARDIM DA PENHA            0             1   \n",
       "\n",
       "   Diabetes  Alcoholism  Handcap  SMS_received No-show  \n",
       "0         0           0        0             0      No  \n",
       "1         0           0        0             0      No  \n",
       "2         0           0        0             0      No  \n",
       "3         0           0        0             0      No  \n",
       "4         1           0        0             0      No  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load your data and print out a few lines. Perform operations to inspect data\n",
    "df = pd.read_csv('noshow.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 110527 entries, 0 to 110526\n",
      "Data columns (total 14 columns):\n",
      "PatientId         110527 non-null float64\n",
      "AppointmentID     110527 non-null int64\n",
      "Gender            110527 non-null object\n",
      "ScheduledDay      110527 non-null object\n",
      "AppointmentDay    110527 non-null object\n",
      "Age               110527 non-null int64\n",
      "Neighbourhood     110527 non-null object\n",
      "Scholarship       110527 non-null int64\n",
      "Hipertension      110527 non-null int64\n",
      "Diabetes          110527 non-null int64\n",
      "Alcoholism        110527 non-null int64\n",
      "Handcap           110527 non-null int64\n",
      "SMS_received      110527 non-null int64\n",
      "No-show           110527 non-null object\n",
      "dtypes: float64(1), int64(8), object(5)\n",
      "memory usage: 11.8+ MB\n"
     ]
    }
   ],
   "source": [
    "#types of variables\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(110527, 14)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#number of rows and columns in the dataset \n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PatientId</th>\n",
       "      <th>AppointmentID</th>\n",
       "      <th>Age</th>\n",
       "      <th>Scholarship</th>\n",
       "      <th>Hipertension</th>\n",
       "      <th>Diabetes</th>\n",
       "      <th>Alcoholism</th>\n",
       "      <th>Handcap</th>\n",
       "      <th>SMS_received</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.105270e+05</td>\n",
       "      <td>1.105270e+05</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.474963e+14</td>\n",
       "      <td>5.675305e+06</td>\n",
       "      <td>37.088874</td>\n",
       "      <td>0.098266</td>\n",
       "      <td>0.197246</td>\n",
       "      <td>0.071865</td>\n",
       "      <td>0.030400</td>\n",
       "      <td>0.022248</td>\n",
       "      <td>0.321026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.560949e+14</td>\n",
       "      <td>7.129575e+04</td>\n",
       "      <td>23.110205</td>\n",
       "      <td>0.297675</td>\n",
       "      <td>0.397921</td>\n",
       "      <td>0.258265</td>\n",
       "      <td>0.171686</td>\n",
       "      <td>0.161543</td>\n",
       "      <td>0.466873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>3.921784e+04</td>\n",
       "      <td>5.030230e+06</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>4.172614e+12</td>\n",
       "      <td>5.640286e+06</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.173184e+13</td>\n",
       "      <td>5.680573e+06</td>\n",
       "      <td>37.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>9.439172e+13</td>\n",
       "      <td>5.725524e+06</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>9.999816e+14</td>\n",
       "      <td>5.790484e+06</td>\n",
       "      <td>115.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          PatientId  AppointmentID            Age    Scholarship  \\\n",
       "count  1.105270e+05   1.105270e+05  110527.000000  110527.000000   \n",
       "mean   1.474963e+14   5.675305e+06      37.088874       0.098266   \n",
       "std    2.560949e+14   7.129575e+04      23.110205       0.297675   \n",
       "min    3.921784e+04   5.030230e+06      -1.000000       0.000000   \n",
       "25%    4.172614e+12   5.640286e+06      18.000000       0.000000   \n",
       "50%    3.173184e+13   5.680573e+06      37.000000       0.000000   \n",
       "75%    9.439172e+13   5.725524e+06      55.000000       0.000000   \n",
       "max    9.999816e+14   5.790484e+06     115.000000       1.000000   \n",
       "\n",
       "        Hipertension       Diabetes     Alcoholism        Handcap  \\\n",
       "count  110527.000000  110527.000000  110527.000000  110527.000000   \n",
       "mean        0.197246       0.071865       0.030400       0.022248   \n",
       "std         0.397921       0.258265       0.171686       0.161543   \n",
       "min         0.000000       0.000000       0.000000       0.000000   \n",
       "25%         0.000000       0.000000       0.000000       0.000000   \n",
       "50%         0.000000       0.000000       0.000000       0.000000   \n",
       "75%         0.000000       0.000000       0.000000       0.000000   \n",
       "max         1.000000       1.000000       1.000000       4.000000   \n",
       "\n",
       "        SMS_received  \n",
       "count  110527.000000  \n",
       "mean        0.321026  \n",
       "std         0.466873  \n",
       "min         0.000000  \n",
       "25%         0.000000  \n",
       "50%         0.000000  \n",
       "75%         1.000000  \n",
       "max         1.000000  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#overview description of the dataset\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>The above illustrates the inputs of each variable. Scholarship, Diabetes, Alcholism, SMS_recieved take 0 corresponding to false, or 1 corresponding to True. The Handicap variable takes a range of ( 0 - 4), searching further for the meaning of each number in the dataset Discussion board, i have come across the following: <br> <i>'each time correspond to one type and the number is the sum of all conditions. 4 means a person with fisical, visual, and other handicap conditions.'</i><br>\n",
    "    \n",
    " for simplification, we're only interested if weather the patient suffers from a handicap condition or not. This will be addressed later on the project as  0 / 1 resembling the rest of the variables.</p> "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Handcap'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking for null values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking for duplicated values #1\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "#checking for duplicated values #2\n",
    "x = df.duplicated()\n",
    "y =0\n",
    "for i in x:\n",
    "     if i == True:\n",
    "        y+=1\n",
    "\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['PatientId', 'AppointmentID', 'Gender', 'ScheduledDay',\n",
       "       'AppointmentDay', 'Age', 'Neighbourhood', 'Scholarship', 'Hipertension',\n",
       "       'Diabetes', 'Alcoholism', 'Handcap', 'SMS_received', 'No-show'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>patientid</th>\n",
       "      <th>appointmentid</th>\n",
       "      <th>gender</th>\n",
       "      <th>scheduledday</th>\n",
       "      <th>appointmentday</th>\n",
       "      <th>age</th>\n",
       "      <th>neighbourhood</th>\n",
       "      <th>scholarship</th>\n",
       "      <th>hipertension</th>\n",
       "      <th>diabetes</th>\n",
       "      <th>alcoholism</th>\n",
       "      <th>handcap</th>\n",
       "      <th>sms_received</th>\n",
       "      <th>no_show</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.987250e+13</td>\n",
       "      <td>5642903</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T18:38:08Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>62</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.589978e+14</td>\n",
       "      <td>5642503</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-04-29T16:08:27Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>56</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.262962e+12</td>\n",
       "      <td>5642549</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T16:19:04Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>62</td>\n",
       "      <td>MATA DA PRAIA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.679512e+11</td>\n",
       "      <td>5642828</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T17:29:31Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>8</td>\n",
       "      <td>PONTAL DE CAMBURI</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.841186e+12</td>\n",
       "      <td>5642494</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T16:07:23Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>56</td>\n",
       "      <td>JARDIM DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>9.598513e+13</td>\n",
       "      <td>5626772</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-27T08:36:51Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>76</td>\n",
       "      <td>REPÚBLICA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7.336882e+14</td>\n",
       "      <td>5630279</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-27T15:05:12Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>23</td>\n",
       "      <td>GOIABEIRAS</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3.449833e+12</td>\n",
       "      <td>5630575</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-27T15:39:58Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>39</td>\n",
       "      <td>GOIABEIRAS</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>5.639473e+13</td>\n",
       "      <td>5638447</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T08:02:16Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>21</td>\n",
       "      <td>ANDORINHAS</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>7.812456e+13</td>\n",
       "      <td>5629123</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-27T12:48:25Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>19</td>\n",
       "      <td>CONQUISTA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>7.345362e+14</td>\n",
       "      <td>5630213</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-27T14:58:11Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>30</td>\n",
       "      <td>NOVA PALESTINA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>7.542951e+12</td>\n",
       "      <td>5620163</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-04-26T08:44:12Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>29</td>\n",
       "      <td>NOVA PALESTINA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>5.666548e+14</td>\n",
       "      <td>5634718</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-28T11:33:51Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>22</td>\n",
       "      <td>NOVA PALESTINA</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>9.113946e+14</td>\n",
       "      <td>5636249</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-04-28T14:52:07Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>28</td>\n",
       "      <td>NOVA PALESTINA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>9.988472e+13</td>\n",
       "      <td>5633951</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-28T10:06:24Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>54</td>\n",
       "      <td>NOVA PALESTINA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>9.994839e+10</td>\n",
       "      <td>5620206</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-26T08:47:27Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>15</td>\n",
       "      <td>NOVA PALESTINA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>8.457439e+13</td>\n",
       "      <td>5633121</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-04-28T08:51:47Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>50</td>\n",
       "      <td>NOVA PALESTINA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1.479497e+13</td>\n",
       "      <td>5633460</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-28T09:28:57Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>40</td>\n",
       "      <td>CONQUISTA</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1.713538e+13</td>\n",
       "      <td>5621836</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-26T10:54:18Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>30</td>\n",
       "      <td>NOVA PALESTINA</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>7.223289e+12</td>\n",
       "      <td>5640433</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T10:43:14Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>46</td>\n",
       "      <td>DA PENHA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>6.222575e+14</td>\n",
       "      <td>5626083</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-27T07:51:14Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>30</td>\n",
       "      <td>NOVA PALESTINA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>1.215484e+13</td>\n",
       "      <td>5628338</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-27T10:50:45Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>4</td>\n",
       "      <td>CONQUISTA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>8.632298e+14</td>\n",
       "      <td>5616091</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-04-25T13:29:16Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>13</td>\n",
       "      <td>CONQUISTA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2.137540e+14</td>\n",
       "      <td>5634142</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-28T10:27:05Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>46</td>\n",
       "      <td>CONQUISTA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>8.734858e+12</td>\n",
       "      <td>5641780</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T14:19:19Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>65</td>\n",
       "      <td>TABUAZEIRO</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>5.819370e+12</td>\n",
       "      <td>5624020</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-04-26T15:04:17Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>46</td>\n",
       "      <td>CONQUISTA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>2.578785e+10</td>\n",
       "      <td>5641781</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T14:19:42Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>45</td>\n",
       "      <td>BENTO FERREIRA</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>1.215484e+13</td>\n",
       "      <td>5628345</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-27T10:51:45Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>4</td>\n",
       "      <td>CONQUISTA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>5.926172e+12</td>\n",
       "      <td>5642400</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-04-29T15:48:02Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>51</td>\n",
       "      <td>SÃO PEDRO</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>1.225776e+12</td>\n",
       "      <td>5642186</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-29T15:16:29Z</td>\n",
       "      <td>2016-04-29T00:00:00Z</td>\n",
       "      <td>32</td>\n",
       "      <td>SANTA MARTHA</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110497</th>\n",
       "      <td>7.935892e+14</td>\n",
       "      <td>5757745</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-06-01T09:46:33Z</td>\n",
       "      <td>2016-06-01T00:00:00Z</td>\n",
       "      <td>76</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110498</th>\n",
       "      <td>9.433654e+13</td>\n",
       "      <td>5787655</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-06-08T10:21:14Z</td>\n",
       "      <td>2016-06-08T00:00:00Z</td>\n",
       "      <td>59</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110499</th>\n",
       "      <td>8.219692e+14</td>\n",
       "      <td>5757697</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-06-01T09:42:56Z</td>\n",
       "      <td>2016-06-01T00:00:00Z</td>\n",
       "      <td>66</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110500</th>\n",
       "      <td>4.434384e+14</td>\n",
       "      <td>5787233</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-06-08T09:35:13Z</td>\n",
       "      <td>2016-06-08T00:00:00Z</td>\n",
       "      <td>59</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110501</th>\n",
       "      <td>4.544252e+11</td>\n",
       "      <td>5758133</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-06-01T10:19:12Z</td>\n",
       "      <td>2016-06-01T00:00:00Z</td>\n",
       "      <td>44</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110502</th>\n",
       "      <td>7.316229e+14</td>\n",
       "      <td>5787937</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-06-08T10:50:42Z</td>\n",
       "      <td>2016-06-08T00:00:00Z</td>\n",
       "      <td>22</td>\n",
       "      <td>GOIABEIRAS</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110503</th>\n",
       "      <td>2.362182e+13</td>\n",
       "      <td>5759473</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-06-01T13:00:36Z</td>\n",
       "      <td>2016-06-01T00:00:00Z</td>\n",
       "      <td>64</td>\n",
       "      <td>SOLON BORGES</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110504</th>\n",
       "      <td>9.947983e+12</td>\n",
       "      <td>5788052</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-06-08T11:06:21Z</td>\n",
       "      <td>2016-06-08T00:00:00Z</td>\n",
       "      <td>4</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110505</th>\n",
       "      <td>5.667344e+13</td>\n",
       "      <td>5758455</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-06-01T10:45:50Z</td>\n",
       "      <td>2016-06-01T00:00:00Z</td>\n",
       "      <td>55</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110506</th>\n",
       "      <td>8.973883e+11</td>\n",
       "      <td>5758779</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-06-01T11:09:20Z</td>\n",
       "      <td>2016-06-01T00:00:00Z</td>\n",
       "      <td>5</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110507</th>\n",
       "      <td>4.769462e+14</td>\n",
       "      <td>5786918</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-06-08T09:04:18Z</td>\n",
       "      <td>2016-06-08T00:00:00Z</td>\n",
       "      <td>0</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110508</th>\n",
       "      <td>9.433654e+13</td>\n",
       "      <td>5757656</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-06-01T09:41:00Z</td>\n",
       "      <td>2016-06-01T00:00:00Z</td>\n",
       "      <td>59</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110509</th>\n",
       "      <td>4.952968e+14</td>\n",
       "      <td>5786750</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-06-08T08:50:51Z</td>\n",
       "      <td>2016-06-08T00:00:00Z</td>\n",
       "      <td>33</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110510</th>\n",
       "      <td>2.362182e+13</td>\n",
       "      <td>5757587</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-06-01T09:35:48Z</td>\n",
       "      <td>2016-06-01T00:00:00Z</td>\n",
       "      <td>64</td>\n",
       "      <td>SOLON BORGES</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110511</th>\n",
       "      <td>8.235996e+11</td>\n",
       "      <td>5786742</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-06-08T08:50:20Z</td>\n",
       "      <td>2016-06-08T00:00:00Z</td>\n",
       "      <td>14</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110512</th>\n",
       "      <td>9.876246e+13</td>\n",
       "      <td>5786368</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-06-08T08:20:01Z</td>\n",
       "      <td>2016-06-08T00:00:00Z</td>\n",
       "      <td>41</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110513</th>\n",
       "      <td>8.674778e+13</td>\n",
       "      <td>5785964</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-06-08T07:52:55Z</td>\n",
       "      <td>2016-06-08T00:00:00Z</td>\n",
       "      <td>2</td>\n",
       "      <td>ANTÔNIO HONÓRIO</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110514</th>\n",
       "      <td>2.695685e+12</td>\n",
       "      <td>5786567</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-06-08T08:35:31Z</td>\n",
       "      <td>2016-06-08T00:00:00Z</td>\n",
       "      <td>58</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110515</th>\n",
       "      <td>6.456342e+14</td>\n",
       "      <td>5778621</td>\n",
       "      <td>M</td>\n",
       "      <td>2016-06-06T15:58:05Z</td>\n",
       "      <td>2016-06-08T00:00:00Z</td>\n",
       "      <td>33</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110516</th>\n",
       "      <td>6.923772e+13</td>\n",
       "      <td>5780205</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-06-07T07:45:16Z</td>\n",
       "      <td>2016-06-08T00:00:00Z</td>\n",
       "      <td>37</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110517</th>\n",
       "      <td>5.574942e+12</td>\n",
       "      <td>5780122</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-06-07T07:38:34Z</td>\n",
       "      <td>2016-06-07T00:00:00Z</td>\n",
       "      <td>19</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110518</th>\n",
       "      <td>7.263315e+13</td>\n",
       "      <td>5630375</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-27T15:15:06Z</td>\n",
       "      <td>2016-06-07T00:00:00Z</td>\n",
       "      <td>50</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110519</th>\n",
       "      <td>6.542388e+13</td>\n",
       "      <td>5630447</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-27T15:23:14Z</td>\n",
       "      <td>2016-06-07T00:00:00Z</td>\n",
       "      <td>22</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110520</th>\n",
       "      <td>9.969977e+14</td>\n",
       "      <td>5650534</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-05-03T07:51:47Z</td>\n",
       "      <td>2016-06-07T00:00:00Z</td>\n",
       "      <td>42</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110521</th>\n",
       "      <td>3.635534e+13</td>\n",
       "      <td>5651072</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-05-03T08:23:40Z</td>\n",
       "      <td>2016-06-07T00:00:00Z</td>\n",
       "      <td>53</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110522</th>\n",
       "      <td>2.572134e+12</td>\n",
       "      <td>5651768</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-05-03T09:15:35Z</td>\n",
       "      <td>2016-06-07T00:00:00Z</td>\n",
       "      <td>56</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110523</th>\n",
       "      <td>3.596266e+12</td>\n",
       "      <td>5650093</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-05-03T07:27:33Z</td>\n",
       "      <td>2016-06-07T00:00:00Z</td>\n",
       "      <td>51</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110524</th>\n",
       "      <td>1.557663e+13</td>\n",
       "      <td>5630692</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-27T16:03:52Z</td>\n",
       "      <td>2016-06-07T00:00:00Z</td>\n",
       "      <td>21</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110525</th>\n",
       "      <td>9.213493e+13</td>\n",
       "      <td>5630323</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-27T15:09:23Z</td>\n",
       "      <td>2016-06-07T00:00:00Z</td>\n",
       "      <td>38</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110526</th>\n",
       "      <td>3.775115e+14</td>\n",
       "      <td>5629448</td>\n",
       "      <td>F</td>\n",
       "      <td>2016-04-27T13:30:56Z</td>\n",
       "      <td>2016-06-07T00:00:00Z</td>\n",
       "      <td>54</td>\n",
       "      <td>MARIA ORTIZ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>110527 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           patientid  appointmentid gender          scheduledday  \\\n",
       "0       2.987250e+13        5642903      F  2016-04-29T18:38:08Z   \n",
       "1       5.589978e+14        5642503      M  2016-04-29T16:08:27Z   \n",
       "2       4.262962e+12        5642549      F  2016-04-29T16:19:04Z   \n",
       "3       8.679512e+11        5642828      F  2016-04-29T17:29:31Z   \n",
       "4       8.841186e+12        5642494      F  2016-04-29T16:07:23Z   \n",
       "5       9.598513e+13        5626772      F  2016-04-27T08:36:51Z   \n",
       "6       7.336882e+14        5630279      F  2016-04-27T15:05:12Z   \n",
       "7       3.449833e+12        5630575      F  2016-04-27T15:39:58Z   \n",
       "8       5.639473e+13        5638447      F  2016-04-29T08:02:16Z   \n",
       "9       7.812456e+13        5629123      F  2016-04-27T12:48:25Z   \n",
       "10      7.345362e+14        5630213      F  2016-04-27T14:58:11Z   \n",
       "11      7.542951e+12        5620163      M  2016-04-26T08:44:12Z   \n",
       "12      5.666548e+14        5634718      F  2016-04-28T11:33:51Z   \n",
       "13      9.113946e+14        5636249      M  2016-04-28T14:52:07Z   \n",
       "14      9.988472e+13        5633951      F  2016-04-28T10:06:24Z   \n",
       "15      9.994839e+10        5620206      F  2016-04-26T08:47:27Z   \n",
       "16      8.457439e+13        5633121      M  2016-04-28T08:51:47Z   \n",
       "17      1.479497e+13        5633460      F  2016-04-28T09:28:57Z   \n",
       "18      1.713538e+13        5621836      F  2016-04-26T10:54:18Z   \n",
       "19      7.223289e+12        5640433      F  2016-04-29T10:43:14Z   \n",
       "20      6.222575e+14        5626083      F  2016-04-27T07:51:14Z   \n",
       "21      1.215484e+13        5628338      F  2016-04-27T10:50:45Z   \n",
       "22      8.632298e+14        5616091      M  2016-04-25T13:29:16Z   \n",
       "23      2.137540e+14        5634142      F  2016-04-28T10:27:05Z   \n",
       "24      8.734858e+12        5641780      F  2016-04-29T14:19:19Z   \n",
       "25      5.819370e+12        5624020      M  2016-04-26T15:04:17Z   \n",
       "26      2.578785e+10        5641781      F  2016-04-29T14:19:42Z   \n",
       "27      1.215484e+13        5628345      F  2016-04-27T10:51:45Z   \n",
       "28      5.926172e+12        5642400      M  2016-04-29T15:48:02Z   \n",
       "29      1.225776e+12        5642186      F  2016-04-29T15:16:29Z   \n",
       "...              ...            ...    ...                   ...   \n",
       "110497  7.935892e+14        5757745      M  2016-06-01T09:46:33Z   \n",
       "110498  9.433654e+13        5787655      F  2016-06-08T10:21:14Z   \n",
       "110499  8.219692e+14        5757697      F  2016-06-01T09:42:56Z   \n",
       "110500  4.434384e+14        5787233      F  2016-06-08T09:35:13Z   \n",
       "110501  4.544252e+11        5758133      M  2016-06-01T10:19:12Z   \n",
       "110502  7.316229e+14        5787937      F  2016-06-08T10:50:42Z   \n",
       "110503  2.362182e+13        5759473      F  2016-06-01T13:00:36Z   \n",
       "110504  9.947983e+12        5788052      F  2016-06-08T11:06:21Z   \n",
       "110505  5.667344e+13        5758455      F  2016-06-01T10:45:50Z   \n",
       "110506  8.973883e+11        5758779      M  2016-06-01T11:09:20Z   \n",
       "110507  4.769462e+14        5786918      F  2016-06-08T09:04:18Z   \n",
       "110508  9.433654e+13        5757656      F  2016-06-01T09:41:00Z   \n",
       "110509  4.952968e+14        5786750      M  2016-06-08T08:50:51Z   \n",
       "110510  2.362182e+13        5757587      F  2016-06-01T09:35:48Z   \n",
       "110511  8.235996e+11        5786742      F  2016-06-08T08:50:20Z   \n",
       "110512  9.876246e+13        5786368      F  2016-06-08T08:20:01Z   \n",
       "110513  8.674778e+13        5785964      M  2016-06-08T07:52:55Z   \n",
       "110514  2.695685e+12        5786567      F  2016-06-08T08:35:31Z   \n",
       "110515  6.456342e+14        5778621      M  2016-06-06T15:58:05Z   \n",
       "110516  6.923772e+13        5780205      F  2016-06-07T07:45:16Z   \n",
       "110517  5.574942e+12        5780122      F  2016-06-07T07:38:34Z   \n",
       "110518  7.263315e+13        5630375      F  2016-04-27T15:15:06Z   \n",
       "110519  6.542388e+13        5630447      F  2016-04-27T15:23:14Z   \n",
       "110520  9.969977e+14        5650534      F  2016-05-03T07:51:47Z   \n",
       "110521  3.635534e+13        5651072      F  2016-05-03T08:23:40Z   \n",
       "110522  2.572134e+12        5651768      F  2016-05-03T09:15:35Z   \n",
       "110523  3.596266e+12        5650093      F  2016-05-03T07:27:33Z   \n",
       "110524  1.557663e+13        5630692      F  2016-04-27T16:03:52Z   \n",
       "110525  9.213493e+13        5630323      F  2016-04-27T15:09:23Z   \n",
       "110526  3.775115e+14        5629448      F  2016-04-27T13:30:56Z   \n",
       "\n",
       "              appointmentday  age      neighbourhood  scholarship  \\\n",
       "0       2016-04-29T00:00:00Z   62    JARDIM DA PENHA            0   \n",
       "1       2016-04-29T00:00:00Z   56    JARDIM DA PENHA            0   \n",
       "2       2016-04-29T00:00:00Z   62      MATA DA PRAIA            0   \n",
       "3       2016-04-29T00:00:00Z    8  PONTAL DE CAMBURI            0   \n",
       "4       2016-04-29T00:00:00Z   56    JARDIM DA PENHA            0   \n",
       "5       2016-04-29T00:00:00Z   76          REPÚBLICA            0   \n",
       "6       2016-04-29T00:00:00Z   23         GOIABEIRAS            0   \n",
       "7       2016-04-29T00:00:00Z   39         GOIABEIRAS            0   \n",
       "8       2016-04-29T00:00:00Z   21         ANDORINHAS            0   \n",
       "9       2016-04-29T00:00:00Z   19          CONQUISTA            0   \n",
       "10      2016-04-29T00:00:00Z   30     NOVA PALESTINA            0   \n",
       "11      2016-04-29T00:00:00Z   29     NOVA PALESTINA            0   \n",
       "12      2016-04-29T00:00:00Z   22     NOVA PALESTINA            1   \n",
       "13      2016-04-29T00:00:00Z   28     NOVA PALESTINA            0   \n",
       "14      2016-04-29T00:00:00Z   54     NOVA PALESTINA            0   \n",
       "15      2016-04-29T00:00:00Z   15     NOVA PALESTINA            0   \n",
       "16      2016-04-29T00:00:00Z   50     NOVA PALESTINA            0   \n",
       "17      2016-04-29T00:00:00Z   40          CONQUISTA            1   \n",
       "18      2016-04-29T00:00:00Z   30     NOVA PALESTINA            1   \n",
       "19      2016-04-29T00:00:00Z   46           DA PENHA            0   \n",
       "20      2016-04-29T00:00:00Z   30     NOVA PALESTINA            0   \n",
       "21      2016-04-29T00:00:00Z    4          CONQUISTA            0   \n",
       "22      2016-04-29T00:00:00Z   13          CONQUISTA            0   \n",
       "23      2016-04-29T00:00:00Z   46          CONQUISTA            0   \n",
       "24      2016-04-29T00:00:00Z   65         TABUAZEIRO            0   \n",
       "25      2016-04-29T00:00:00Z   46          CONQUISTA            0   \n",
       "26      2016-04-29T00:00:00Z   45     BENTO FERREIRA            0   \n",
       "27      2016-04-29T00:00:00Z    4          CONQUISTA            0   \n",
       "28      2016-04-29T00:00:00Z   51          SÃO PEDRO            0   \n",
       "29      2016-04-29T00:00:00Z   32       SANTA MARTHA            0   \n",
       "...                      ...  ...                ...          ...   \n",
       "110497  2016-06-01T00:00:00Z   76        MARIA ORTIZ            0   \n",
       "110498  2016-06-08T00:00:00Z   59        MARIA ORTIZ            0   \n",
       "110499  2016-06-01T00:00:00Z   66        MARIA ORTIZ            0   \n",
       "110500  2016-06-08T00:00:00Z   59        MARIA ORTIZ            0   \n",
       "110501  2016-06-01T00:00:00Z   44        MARIA ORTIZ            0   \n",
       "110502  2016-06-08T00:00:00Z   22         GOIABEIRAS            0   \n",
       "110503  2016-06-01T00:00:00Z   64       SOLON BORGES            0   \n",
       "110504  2016-06-08T00:00:00Z    4        MARIA ORTIZ            0   \n",
       "110505  2016-06-01T00:00:00Z   55        MARIA ORTIZ            0   \n",
       "110506  2016-06-01T00:00:00Z    5        MARIA ORTIZ            0   \n",
       "110507  2016-06-08T00:00:00Z    0        MARIA ORTIZ            0   \n",
       "110508  2016-06-01T00:00:00Z   59        MARIA ORTIZ            0   \n",
       "110509  2016-06-08T00:00:00Z   33        MARIA ORTIZ            0   \n",
       "110510  2016-06-01T00:00:00Z   64       SOLON BORGES            0   \n",
       "110511  2016-06-08T00:00:00Z   14        MARIA ORTIZ            0   \n",
       "110512  2016-06-08T00:00:00Z   41        MARIA ORTIZ            0   \n",
       "110513  2016-06-08T00:00:00Z    2    ANTÔNIO HONÓRIO            0   \n",
       "110514  2016-06-08T00:00:00Z   58        MARIA ORTIZ            0   \n",
       "110515  2016-06-08T00:00:00Z   33        MARIA ORTIZ            0   \n",
       "110516  2016-06-08T00:00:00Z   37        MARIA ORTIZ            0   \n",
       "110517  2016-06-07T00:00:00Z   19        MARIA ORTIZ            0   \n",
       "110518  2016-06-07T00:00:00Z   50        MARIA ORTIZ            0   \n",
       "110519  2016-06-07T00:00:00Z   22        MARIA ORTIZ            0   \n",
       "110520  2016-06-07T00:00:00Z   42        MARIA ORTIZ            0   \n",
       "110521  2016-06-07T00:00:00Z   53        MARIA ORTIZ            0   \n",
       "110522  2016-06-07T00:00:00Z   56        MARIA ORTIZ            0   \n",
       "110523  2016-06-07T00:00:00Z   51        MARIA ORTIZ            0   \n",
       "110524  2016-06-07T00:00:00Z   21        MARIA ORTIZ            0   \n",
       "110525  2016-06-07T00:00:00Z   38        MARIA ORTIZ            0   \n",
       "110526  2016-06-07T00:00:00Z   54        MARIA ORTIZ            0   \n",
       "\n",
       "        hipertension  diabetes  alcoholism  handcap  sms_received no_show  \n",
       "0                  1         0           0        0             0      No  \n",
       "1                  0         0           0        0             0      No  \n",
       "2                  0         0           0        0             0      No  \n",
       "3                  0         0           0        0             0      No  \n",
       "4                  1         1           0        0             0      No  \n",
       "5                  1         0           0        0             0      No  \n",
       "6                  0         0           0        0             0     Yes  \n",
       "7                  0         0           0        0             0     Yes  \n",
       "8                  0         0           0        0             0      No  \n",
       "9                  0         0           0        0             0      No  \n",
       "10                 0         0           0        0             0      No  \n",
       "11                 0         0           0        0             1     Yes  \n",
       "12                 0         0           0        0             0      No  \n",
       "13                 0         0           0        0             0      No  \n",
       "14                 0         0           0        0             0      No  \n",
       "15                 0         0           0        0             1      No  \n",
       "16                 0         0           0        0             0      No  \n",
       "17                 0         0           0        0             0     Yes  \n",
       "18                 0         0           0        0             1      No  \n",
       "19                 0         0           0        0             0      No  \n",
       "20                 0         0           0        0             0     Yes  \n",
       "21                 0         0           0        0             0     Yes  \n",
       "22                 0         0           0        0             1     Yes  \n",
       "23                 0         0           0        0             0      No  \n",
       "24                 0         0           0        0             0      No  \n",
       "25                 1         0           0        0             1      No  \n",
       "26                 1         0           0        0             0      No  \n",
       "27                 0         0           0        0             0      No  \n",
       "28                 0         0           0        0             0      No  \n",
       "29                 0         0           0        0             0      No  \n",
       "...              ...       ...         ...      ...           ...     ...  \n",
       "110497             0         0           0        0             0      No  \n",
       "110498             0         0           0        0             0      No  \n",
       "110499             1         1           0        0             0      No  \n",
       "110500             0         0           0        0             0      No  \n",
       "110501             0         0           0        0             0      No  \n",
       "110502             0         0           0        0             0      No  \n",
       "110503             0         0           0        0             0      No  \n",
       "110504             0         0           0        0             0      No  \n",
       "110505             0         0           0        0             0      No  \n",
       "110506             0         0           0        0             0      No  \n",
       "110507             0         0           0        0             0      No  \n",
       "110508             0         0           0        0             0      No  \n",
       "110509             0         0           0        0             0      No  \n",
       "110510             0         0           0        0             0      No  \n",
       "110511             0         0           0        0             0      No  \n",
       "110512             0         0           0        0             0      No  \n",
       "110513             0         0           0        0             0      No  \n",
       "110514             0         0           0        0             0      No  \n",
       "110515             1         0           0        0             0     Yes  \n",
       "110516             0         0           0        0             0     Yes  \n",
       "110517             0         0           0        0             0      No  \n",
       "110518             0         0           0        0             1      No  \n",
       "110519             0         0           0        0             1      No  \n",
       "110520             0         0           0        0             1      No  \n",
       "110521             0         0           0        0             1      No  \n",
       "110522             0         0           0        0             1      No  \n",
       "110523             0         0           0        0             1      No  \n",
       "110524             0         0           0        0             1      No  \n",
       "110525             0         0           0        0             1      No  \n",
       "110526             0         0           0        0             1      No  \n",
       "\n",
       "[110527 rows x 14 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#renaming and fixing column names to lower cases \n",
    "df.columns = map(str.lower, df.columns)\n",
    "#fixing no-show to no_show \n",
    "df.rename(columns={'no-show':'no_show'}, inplace=True )\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#replace handcap values 0 - 4 to only 0 / 1 \n",
    "df['handcap'] = df['handcap'].replace([2,3,4], 1)\n",
    "df['handcap'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>patientid</th>\n",
       "      <th>appointmentid</th>\n",
       "      <th>age</th>\n",
       "      <th>scholarship</th>\n",
       "      <th>hipertension</th>\n",
       "      <th>diabetes</th>\n",
       "      <th>alcoholism</th>\n",
       "      <th>handcap</th>\n",
       "      <th>sms_received</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.105270e+05</td>\n",
       "      <td>1.105270e+05</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "      <td>110527.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.474963e+14</td>\n",
       "      <td>5.675305e+06</td>\n",
       "      <td>37.088874</td>\n",
       "      <td>0.098266</td>\n",
       "      <td>0.197246</td>\n",
       "      <td>0.071865</td>\n",
       "      <td>0.030400</td>\n",
       "      <td>0.020276</td>\n",
       "      <td>0.321026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.560949e+14</td>\n",
       "      <td>7.129575e+04</td>\n",
       "      <td>23.110205</td>\n",
       "      <td>0.297675</td>\n",
       "      <td>0.397921</td>\n",
       "      <td>0.258265</td>\n",
       "      <td>0.171686</td>\n",
       "      <td>0.140942</td>\n",
       "      <td>0.466873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>3.921784e+04</td>\n",
       "      <td>5.030230e+06</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>4.172614e+12</td>\n",
       "      <td>5.640286e+06</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.173184e+13</td>\n",
       "      <td>5.680573e+06</td>\n",
       "      <td>37.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>9.439172e+13</td>\n",
       "      <td>5.725524e+06</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>9.999816e+14</td>\n",
       "      <td>5.790484e+06</td>\n",
       "      <td>115.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          patientid  appointmentid            age    scholarship  \\\n",
       "count  1.105270e+05   1.105270e+05  110527.000000  110527.000000   \n",
       "mean   1.474963e+14   5.675305e+06      37.088874       0.098266   \n",
       "std    2.560949e+14   7.129575e+04      23.110205       0.297675   \n",
       "min    3.921784e+04   5.030230e+06      -1.000000       0.000000   \n",
       "25%    4.172614e+12   5.640286e+06      18.000000       0.000000   \n",
       "50%    3.173184e+13   5.680573e+06      37.000000       0.000000   \n",
       "75%    9.439172e+13   5.725524e+06      55.000000       0.000000   \n",
       "max    9.999816e+14   5.790484e+06     115.000000       1.000000   \n",
       "\n",
       "        hipertension       diabetes     alcoholism        handcap  \\\n",
       "count  110527.000000  110527.000000  110527.000000  110527.000000   \n",
       "mean        0.197246       0.071865       0.030400       0.020276   \n",
       "std         0.397921       0.258265       0.171686       0.140942   \n",
       "min         0.000000       0.000000       0.000000       0.000000   \n",
       "25%         0.000000       0.000000       0.000000       0.000000   \n",
       "50%         0.000000       0.000000       0.000000       0.000000   \n",
       "75%         0.000000       0.000000       0.000000       0.000000   \n",
       "max         1.000000       1.000000       1.000000       1.000000   \n",
       "\n",
       "        sms_received  \n",
       "count  110527.000000  \n",
       "mean        0.321026  \n",
       "std         0.466873  \n",
       "min         0.000000  \n",
       "25%         0.000000  \n",
       "50%         0.000000  \n",
       "75%         1.000000  \n",
       "max         1.000000  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='eda'></a>\n",
    "## Exploratory Data Analysis\n",
    "\n",
    "\n",
    "### Are patients not commited to a scholarship more likely to not show up?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#in this investigation, we're only interested in patients with scholarship and appointment commitment\n",
    "#this implies the removal of unnecessary columns \n",
    "df_enrolled = df.drop([ 'patientid', 'appointmentid', 'neighbourhood','gender', 'scheduledday',\n",
    "       'appointmentday', 'age',  'hipertension',\n",
    "       'diabetes', 'alcoholism', 'handcap', 'sms_received'],  axis = 1) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df of all patients enrolled in the scholarship and did not show up \n",
    "enrolled_yes = df_enrolled.query('scholarship == 1 and no_show == \"Yes\"')\n",
    "#df of all patients enrolled in the scholarship and did show up \n",
    "enrolled_no= df_enrolled.query('scholarship == 1 and no_show == \"No\"')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df of all patients not enrolled in the scholarship and did not show up\n",
    "notenrolled_yes = df_enrolled.query('scholarship == 0 and no_show == \"Yes\"')\n",
    "#df of all patients not enrolled in the scholarship and did show up\n",
    "notenrolled_no = df_enrolled.query('scholarship == 0 and no_show == \"No\"')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f916012abe0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# visualizing with a grouped bar chart \n",
    "\n",
    "labels = ['Enrolled', 'Not Enrolled']\n",
    "show = [len(enrolled_no), len(notenrolled_no)]\n",
    "no_show = [len(enrolled_yes), len(notenrolled_yes)]\n",
    "\n",
    "x = np.arange(len(labels))  # the label locations\n",
    "width = 0.35  # the width of the bars\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(8,10))\n",
    "rects1 = ax.bar(x - width/2, show, width, label='Show')\n",
    "rects2 = ax.bar(x + width/2, no_show, width, label='No Show')\n",
    "\n",
    "#setting labels,titles and legend.\n",
    "ax.set_ylabel('Count')\n",
    "ax.set_title('Appointment Commitment based on scholarship enrollment')\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(labels)\n",
    "ax.legend()\n",
    "\n",
    "#this is for attaching text above each bar displaying the representative count\n",
    "def labeling(rects):\n",
    "    for rect in rects:\n",
    "        height = rect.get_height()\n",
    "        ax.annotate('{}'.format(height),xy=(rect.get_x() + rect.get_width() / 2, height), \n",
    "                    xytext=(0, 3),  # 3 points vertical offset\n",
    "                    textcoords=\"offset points\",\n",
    "                    ha='center', va='bottom')\n",
    "\n",
    "\n",
    "labeling(rects1)\n",
    "labeling(rects2)\n",
    "\n",
    "fig.tight_layout()\n",
    "\n",
    "plt.show()\n",
    "\n",
    "#grouping chart reference: https://matplotlib.org/3.1.0/gallery/lines_bars_and_markers/barchart.html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> to further ivestigate and get a clear and fair idea of the above chart, it is only wiser to compare the percentage of patients who failed to show up upon each group. \n",
    "e.g, of all patients enrolled in a scholarship, how many did not show up?<br>\n",
    "<b>reminder: 'yes' indicates failure of showing up, 'no' indicates patient show up. </b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23.73630420771568"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Percentage of Patients enrolled in scholarship who failed to show up\n",
    "# enrolled-noshow = enrolled-noshow/all enrolled patients\n",
    "perc_enrolled = (len(enrolled_yes)/(len(enrolled_no)+len(enrolled_yes)))*100\n",
    "perc_enrolled\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "19.807155900708366"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Percentage of Patients not enrolled in a scholarship and failed to show up\n",
    "# notenrolled-noshow = notenrolled-noshow/all not enrolled patients\n",
    "perc_noenrolled = (len(notenrolled_yes)/(len(notenrolled_no)+len(notenrolled_yes)))*100\n",
    "perc_noenrolled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.patches.Wedge at 0x7f431e2ff668>,\n",
       "  <matplotlib.patches.Wedge at 0x7f431e2ffda0>],\n",
       " [Text(0.155393,1.08897,'not enrolled'), Text(-0.155393,-1.08897,'enrolled')],\n",
       " [Text(0.0847601,0.593983,'45.5%'), Text(-0.08476,-0.593983,'54.5%')])"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f431c82c9b0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#visualizing using pie chart\n",
    "labels = ['not enrolled','enrolled']\n",
    "sizes = [perc_noenrolled,perc_enrolled ]\n",
    "plt.pie(sizes, labels = labels, autopct='%1.1f%%' )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What age group of patients more likely to not show up?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>The following investigation prunes unnecessary columns and divides the age groups into the following manner:</p>\n",
    "0-2 Infants <br>\n",
    "3-12 Children <br>\n",
    "13-18 Adolescence <br>\n",
    "19-35 Young Adult <br>\n",
    "36-59 Middle Aged <br>\n",
    "60+ Senior\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>no_show</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>62</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>56</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>62</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>56</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>76</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>23</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>39</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>21</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>19</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>30</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>29</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>22</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>28</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>54</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>15</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>50</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>40</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>30</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>46</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>30</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>4</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>13</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>46</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>65</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>46</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>45</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>4</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>51</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>32</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110497</th>\n",
       "      <td>76</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110498</th>\n",
       "      <td>59</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110499</th>\n",
       "      <td>66</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110500</th>\n",
       "      <td>59</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110501</th>\n",
       "      <td>44</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110502</th>\n",
       "      <td>22</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110503</th>\n",
       "      <td>64</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110504</th>\n",
       "      <td>4</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110505</th>\n",
       "      <td>55</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110506</th>\n",
       "      <td>5</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110507</th>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110508</th>\n",
       "      <td>59</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110509</th>\n",
       "      <td>33</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110510</th>\n",
       "      <td>64</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110511</th>\n",
       "      <td>14</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110512</th>\n",
       "      <td>41</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110513</th>\n",
       "      <td>2</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110514</th>\n",
       "      <td>58</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110515</th>\n",
       "      <td>33</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110516</th>\n",
       "      <td>37</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110517</th>\n",
       "      <td>19</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110518</th>\n",
       "      <td>50</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110519</th>\n",
       "      <td>22</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110520</th>\n",
       "      <td>42</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110521</th>\n",
       "      <td>53</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110522</th>\n",
       "      <td>56</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110523</th>\n",
       "      <td>51</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110524</th>\n",
       "      <td>21</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110525</th>\n",
       "      <td>38</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110526</th>\n",
       "      <td>54</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>110527 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        age no_show\n",
       "0        62      No\n",
       "1        56      No\n",
       "2        62      No\n",
       "3         8      No\n",
       "4        56      No\n",
       "5        76      No\n",
       "6        23     Yes\n",
       "7        39     Yes\n",
       "8        21      No\n",
       "9        19      No\n",
       "10       30      No\n",
       "11       29     Yes\n",
       "12       22      No\n",
       "13       28      No\n",
       "14       54      No\n",
       "15       15      No\n",
       "16       50      No\n",
       "17       40     Yes\n",
       "18       30      No\n",
       "19       46      No\n",
       "20       30     Yes\n",
       "21        4     Yes\n",
       "22       13     Yes\n",
       "23       46      No\n",
       "24       65      No\n",
       "25       46      No\n",
       "26       45      No\n",
       "27        4      No\n",
       "28       51      No\n",
       "29       32      No\n",
       "...     ...     ...\n",
       "110497   76      No\n",
       "110498   59      No\n",
       "110499   66      No\n",
       "110500   59      No\n",
       "110501   44      No\n",
       "110502   22      No\n",
       "110503   64      No\n",
       "110504    4      No\n",
       "110505   55      No\n",
       "110506    5      No\n",
       "110507    0      No\n",
       "110508   59      No\n",
       "110509   33      No\n",
       "110510   64      No\n",
       "110511   14      No\n",
       "110512   41      No\n",
       "110513    2      No\n",
       "110514   58      No\n",
       "110515   33     Yes\n",
       "110516   37     Yes\n",
       "110517   19      No\n",
       "110518   50      No\n",
       "110519   22      No\n",
       "110520   42      No\n",
       "110521   53      No\n",
       "110522   56      No\n",
       "110523   51      No\n",
       "110524   21      No\n",
       "110525   38      No\n",
       "110526   54      No\n",
       "\n",
       "[110527 rows x 2 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#this question investigates which age group is more likely to not show? this implies the removal of unnecessary columns\n",
    "df_agetype =  df.drop([ 'patientid', 'appointmentid', 'gender', 'scheduledday',\n",
    "       'appointmentday', 'neighbourhood', 'scholarship', 'hipertension',\n",
    "       'diabetes', 'alcoholism', 'handcap', 'sms_received'],  axis = 1) \n",
    "df_agetype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>no_show</th>\n",
       "      <th>age_group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>62</td>\n",
       "      <td>No</td>\n",
       "      <td>Senior</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>56</td>\n",
       "      <td>No</td>\n",
       "      <td>Middle Aged</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>62</td>\n",
       "      <td>No</td>\n",
       "      <td>Senior</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8</td>\n",
       "      <td>No</td>\n",
       "      <td>Children</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>56</td>\n",
       "      <td>No</td>\n",
       "      <td>Middle Aged</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age no_show    age_group\n",
       "0   62      No       Senior\n",
       "1   56      No  Middle Aged\n",
       "2   62      No       Senior\n",
       "3    8      No     Children\n",
       "4   56      No  Middle Aged"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#split ages into seperate group age\n",
    "# Bin edges that will be used to \"cut\" the data into groups\n",
    "\n",
    "bin_edges = [-1 ,2,12 , 18, 35,59, 120 ] \n",
    "agelabels = ['Infants','Children' , 'Adolescence', 'Young Adult', 'Middle Aged', 'Senior']\n",
    "# Creates age group column\n",
    "df_agetype['age_group'] = pd.cut(df_agetype['age'], bin_edges, labels=agelabels)\n",
    "\n",
    "# Checks for successful creation of this column\n",
    "df_agetype.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>22319.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>34.317667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>21.965941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>16.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>33.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>51.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>115.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                age\n",
       "count  22319.000000\n",
       "mean      34.317667\n",
       "std       21.965941\n",
       "min        0.000000\n",
       "25%       16.000000\n",
       "50%       33.000000\n",
       "75%       51.000000\n",
       "max      115.000000"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# we're only interested in the patients who did not show up\n",
    "df_agetype = df_agetype.query('no_show == \"Yes\"')\n",
    "df_agetype.describe()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,0,'age group')"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f431e1f2390>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#exploring the numbers of each group\n",
    "vis = df_agetype.groupby(['age_group'])['no_show'].count().plot.bar( figsize=(10,10))\n",
    "vis.set_title('Age groups of patient that did not show up ')\n",
    "vis.set_ylabel('count')\n",
    "vis.set_xlabel('age group')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f431e58eef0>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f43487d4588>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_agetype['age_group'].value_counts().plot.pie(autopct='%1.0f%%', figsize=(10,10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# What is the common medical issue of patients not likely to show up? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "><h3> This section investigates which medical issue is most common in patients who fail to show up, the following is examined:</h3> <ul> <li>hipertension</li><li>diabetes</li><li>alcholism</li><li>handcap</li><li>no issues</li></ul>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This question implies pruning unnecessary columns\n",
    "df_issues = df\n",
    "\n",
    "df_issues.drop(columns=['patientid', 'appointmentid', 'gender', 'scheduledday',\n",
    "       'appointmentday', 'age', 'neighbourhood', 'scholarship', 'sms_received'] , inplace = True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['hipertension', 'diabetes', 'alcoholism', 'handcap', 'no_show'], dtype='object')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "#we're only interested in the patients who failed to show up\n",
    "df_issues = df_issues.query('no_show == \"Yes\"')\n",
    "\n",
    "hypertension = df_issues.query('hipertension == 1')\n",
    "diabetes = df_issues.query('diabetes == 1')\n",
    "alcoholism = df_issues.query('alcoholism == 1')\n",
    "handcap = df_issues.query('handcap == 1')\n",
    "noissues = df_issues.query('hipertension == 0 and diabetes ==0 and alcoholism==0 and handcap == 0')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f915ffa5630>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# visualizing with a bar chart \n",
    "locations = [1, 2 , 3 , 4 , 5 ]\n",
    "\n",
    "heights = [len(noissues),len(hypertension),  len(diabetes),len(alcoholism), len(handcap) ]\n",
    "labels = ['No Issues', 'Hipertension', 'Diabetes', 'Alcoholism', 'Handcap']\n",
    "plt.bar(locations, heights, tick_label=labels)\n",
    "plt.title('Medical issues correlated of appointment commitment')\n",
    "plt.xlabel('Medical Issues')\n",
    "plt.ylabel('Count');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.patches.Wedge at 0x7f915cc5e358>,\n",
       "  <matplotlib.patches.Wedge at 0x7f915cc5ea90>,\n",
       "  <matplotlib.patches.Wedge at 0x7f915cc66278>,\n",
       "  <matplotlib.patches.Wedge at 0x7f915cc66a20>,\n",
       "  <matplotlib.patches.Wedge at 0x7f915cc6e208>],\n",
       " [Text(-0.745071,0.80924,'No Issues'),\n",
       "  Text(0.442025,-1.00728,'Hipertension'),\n",
       "  Text(0.979143,-0.501277,'Diabetes'),\n",
       "  Text(1.07892,-0.214307,'Alcoholism'),\n",
       "  Text(1.09842,-0.0588479,'Handcap')],\n",
       " [Text(-0.406403,0.441403,'73.7%'),\n",
       "  Text(0.241105,-0.549426,'15.8%'),\n",
       "  Text(0.534078,-0.273424,'6.0%'),\n",
       "  Text(0.588503,-0.116895,'2.8%'),\n",
       "  Text(0.599141,-0.0320989,'1.7%')])"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f915cca9780>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#visualizing using pie chart\n",
    "\n",
    "plt.pie(heights, labels = labels, autopct='%1.1f%%' )\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='conclusions'></a>\n",
    "## Conclusions\n",
    "\n",
    "> **Are patients not commited to a scholarship more likely to not show up?** <br> The question investigated the percentage of patients who failed to show up based on weather they were enrolled in a scholarship or not. The output of this investigations show that 24% of patients enrolled in a scholarship fail to show up, while only 20% of those not enrolled. The difference between the two groups is statistically insignificant thus, the variable 'scholarship' does not give indication of patient attendance.\n",
    "\n",
    "<hr>\n",
    "\n",
    "> **What age group of patients more likely to not show up?**<br> This investigation started by first segmenting the data based on the ages of patients and placing them in groups in the following manner: <ul><li>Infants </li>\n",
    "    <li>Children </li>\n",
    "    <li>Adolescence </li>\n",
    "    <li> Young Adult </li>\n",
    "    <li> Middle Aged </li>\n",
    "    <li> Senior</li><br><p>The investigation concludes the following: Middle aged patients represents the most group of patients that fail to show up to appointments compromising a total of 31%. Moreover, second comes the young adults group with 26% and a following of 15% and 13% of seniors and children age groups, respectively. </p> \n",
    "  \n",
    " <hr>\n",
    "\n",
    "> **What is the most common medical issue of patients not likely to show up?**<br>\n",
    "This question investigates the common medical issue found in patients who fail to show up, the findings show that a majority of 73.7% patients suffer from none of the issues mentioned. However, the most common medical issue found in 15.8% of patients who stood up on their appointment have hipertension. The remaining medical issues represent merely an insignificant percentage, only 6% have diabetes, 2.8% suffer from alcholosim and 1.7% with handicap issues. Thus, we may conclude that medical issues is not sufficiant to detect the absence of patients from their appointments.  \n",
    "\n",
    "\n",
    "## Submitting your Project \n",
    "\n",
    "> Before you submit your project, you need to create a .html or .pdf version of this notebook in the workspace here. To do that, run the code cell below. If it worked correctly, you should get a return code of 0, and you should see the generated .html file in the workspace directory (click on the orange Jupyter icon in the upper left).\n",
    "\n",
    "> Alternatively, you can download this report as .html via the **File** > **Download as** submenu, and then manually upload it into the workspace directory by clicking on the orange Jupyter icon in the upper left, then using the Upload button.\n",
    "\n",
    "> Once you've done this, you can submit your project by clicking on the \"Submit Project\" button in the lower right here. This will create and submit a zip file with this .ipynb doc and the .html or .pdf version you created. Congratulations!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from subprocess import call\n",
    "call(['python', '-m', 'nbconvert', 'Investigate_a_Dataset.ipynb'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
